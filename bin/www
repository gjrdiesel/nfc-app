#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../server');
const debug = require('debug')('express-sequelize');
const models = require('../models');
const http = require('http').createServer(app);
const io = require('socket.io')(http);
require('../reader')(io);

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */

models.sequelize.sync().then(function () {
    /**
     * Listen on provided port, on all network interfaces.
     */
    http.listen(port, function () {
        debug('Express http listening on port ' + http.address().port);
    });
    http.on('error', onError);
    http.on('listening', onListening);
}).catch(e=>{ console.log(e); process.exit(1); });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    console.log("ERROR: ",error);
    process.exit(1);
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = http.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
